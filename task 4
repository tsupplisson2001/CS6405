from sklearn.pipeline import Pipeline
from sklearn.linear_model import Ridge
from sklearn.feature_selection import SelectKBest, f_regression
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error, r2_score
import time

pipe_ridge = Pipeline([
    ('scaler', MinMaxScaler()), #Define MinMaxScaler
    ('select', SelectKBest(score_func=f_regression)), #Define SelectKBest with f_regression scoring function
    ('regressor', Ridge()) #Define Ridge Regression Model
])

grid_parameters = { #Define the parameters
                   'select__k': [10, 25, 50, 100, 150, 'all'], #Define SelectKBest as 5 best, 10 best, and none
                   'regressor__alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000] #Define Ridge regularisation parameters
}

ridge_grid = GridSearchCV(pipe_ridge, grid_parameters, cv=5) #Wrap the pipeline in Grid Search, with the above parameters and 5-fold Cross Validation
ridge_grid.fit(X_train, y_train) #Fit the model to the train set
best_ridge = ridge_grid.best_estimator_ #Find the best estimator

starttime_best_ridge = time.time() #Define start time
tree_grid_preds = best_ridge.predict(X_test) #Apply test set to model
best_ridge_time = round((time.time() - starttime_best_ridge),6) #Substract Prediction time from iniital time to find time

print("Ridge Regression Model") #Print model time, best parameters and accuracy score
print("Best paramters:", ridge_grid.best_params_)
print("Its prediction time is:", best_ridge_time, "seconds")
print("Its accuracy is:", best_ridge.score(X_test, y_test))
